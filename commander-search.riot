<commander-search>
  <div class="columns">
    <div class="column">
      <button class="button is-primary" type="button" onclick="{ onSearchClick }">Search</button>
    </div>
  </div>
  <div class="columns">
    <div class="column">
      <span class="icon"><i class="ms ms-b ms-cost { state.colors.B ? '' : 'filtered' }" onclick="{ onManaClick }"></i></span>
      <span class="icon"><i class="ms ms-g ms-cost { state.colors.G ? '' : 'filtered' }" onclick="{ onManaClick }"></i></span>
      <span class="icon"><i class="ms ms-r ms-cost { state.colors.R ? '' : 'filtered' }" onclick="{ onManaClick }"></i></span>
      <span class="icon"><i class="ms ms-u ms-cost { state.colors.U ? '' : 'filtered' }" onclick="{ onManaClick }"></i></span>      
      <span class="icon"><i class="ms ms-w ms-cost { state.colors.W ? '' : 'filtered' }" onclick="{ onManaClick }"></i></span>
    </div>
  </div>
  <div each="{ commanderSet in state.commanderSets }">
    <div class="columns">
      <div class="column">
        <h4 class="title is-4">{ commanderSet.set }</h4>
      </div>
    </div>
    <div class="columns is-multiline">
      <div class="column is-one-quarter-desktop is-half-tablet { shouldShow(card) ? '' : 'filtered' }" each="{ card in commanderSet.cards }">
        <img src="{ card.imageUrl }" alt="{ card.name }">
      </div>
    </div>
  </div>
  <script>
    function commanderQuery(set) {
      return "https://api.magicthegathering.io/v1/cards?types=Planeswalker|Creature&supertypes=Legendary&orderBy=colorIdentity&set=" + set;
    }
    function localizedCards(rawCards, lang) {
      return rawCards.map(c => {
        const jp = c.foreignNames.find(f => f.language == lang);
        if (jp) {
          c.name = jp.name;
          c.imageUrl = jp.imageUrl;
        }
        return c;
      }).filter(c => c.imageUrl);
    }
    function sortCommanders(cards) {
      var planeswalkers = cards.filter(c => c.types.includes('Planeswalker'));
      var creatures = cards.filter(c => c.types.includes('Creature'));
      return planeswalkers.concat(creatures);
    }
    export default {
      onBeforeMount(state, props) {
        this.props = {
          standards: ['ELD','M20','WAR','RNA','GRN'],
        };
        this.state = {
          commanderSets: [],
          colors: {'W':true,'U':true,'B':true,'R':true,'G':true},
        };
      },
      onSearchClick(e) {
        try {
          this.state.commanderSets = [];
          this.props.standards.forEach((set, index, _) => {
            fetch(commanderQuery(set))
            .then(response => response.json())
            .then(json => {
              // console.log(json);
              const cards = localizedCards(json.cards, "Japanese");
              this.state.commanderSets.splice(index, 0, {
                'set': set,
                'cards': sortCommanders(cards)
              });
              this.update({
                'commanderSets': this.state.commanderSets,
              });
            });
          })
        } catch (error) {
          this.update({
            error: error.message
          });
        }
      },
      onManaClick(e) {
        var ms;
        if (e.target.className.includes('ms-w')) { ms = 'W'; }
        else if (e.target.className.includes('ms-u')) { ms = 'U'; }
        else if (e.target.className.includes('ms-b')) { ms = 'B'; }
        else if (e.target.className.includes('ms-r')) { ms = 'R'; }
        else if (e.target.className.includes('ms-g')) { ms = 'G'; }
        else { return; }

        this.state.colors[ms] = ! this.state.colors[ms];
        this.update({ 'colors': this.state.colors });
      },
      shouldShow(card) {
        const intersects = card.colorIdentity.filter(c => this.state.colors[c]);
        return intersects.length > 0;
      }
    }
  </script>
</commander-search>
